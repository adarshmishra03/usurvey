{"version":3,"sources":["logo.svg","Usurvey.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","firebase","require","uuid","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","analytics","Usurvey","props","state","uid","v1","studentName","answers","answer1","answer2","answer3","isSubmitted","nameSubmit","bind","answerSelected","questionSubmit","event","this","setState","refs","name","value","console","log","target","database","ref","set","questions","onSubmit","className","type","placeholder","onChange","Component","App","src","logo","alt","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.65cbf56a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, {Component} from 'react';\r\nvar firebase = require('firebase');\r\nvar uuid = require('uuid');\r\n\r\nvar firebaseConfig = {\r\n    apiKey: \"AIzaSyB5YDgstAjLlAIdgc3hZwXhrJdYVUkz-_g\",\r\n    authDomain: \"usurvey-85279.firebaseapp.com\",\r\n    databaseURL: \"https://usurvey-85279.firebaseio.com\",\r\n    projectId: \"usurvey-85279\",\r\n    storageBucket: \"usurvey-85279.appspot.com\",\r\n    messagingSenderId: \"765926984139\",\r\n    appId: \"1:765926984139:web:c54af3feafb9ac10fc8e4e\",\r\n    measurementId: \"G-RK1NC9RZ6Z\"\r\n  };\r\n  firebase.initializeApp(firebaseConfig);\r\n  firebase.analytics();\r\n\r\nclass Usurvey extends Component {\r\n    nameSubmit(event){\r\n        this.setState({studentName: this.refs.name.value},function(){\r\n            console.log(this.state);\r\n        });\r\n    }\r\n    answerSelected(event){\r\n        var answers = this.state.answers;\r\n        if(event.target.name === 'answer1'){\r\n            answers.answer1 = event.target.value;\r\n        }else if(event.target.name === 'answer2'){\r\n            answers.answer2 = event.target.value;\r\n        }else if(event.target.name === 'answer3'){\r\n            answers.answer3 = event.target.value;\r\n        }\r\n        \r\n        this.setState({answers: answers},function(){\r\n            console.log(this.state);\r\n        });\r\n    }\r\n    questionSubmit(){\r\n        firebase.database().ref('uSurvey/'+ this.state.uid).set({\r\n            studentName: this.state.studentName,\r\n            answers: this.state.answers\r\n        });\r\n        this.setState({isSubmitted: true});\r\n    }\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            uid: uuid.v1(),\r\n            studentName:'',\r\n            answers: {\r\n                answer1: '',\r\n                answer2: '',\r\n                answer3: ''\r\n            },\r\n            isSubmitted: false\r\n        };\r\n        this.nameSubmit=this.nameSubmit.bind(this);\r\n        this.answerSelected=this.answerSelected.bind(this);\r\n        this.questionSubmit=this.questionSubmit.bind(this);\r\n    }\r\n\r\n    render(){\r\n        var studentName;\r\n        var questions;\r\n\r\n        if(this.state.studentName === '' && this.state.isSubmitted === false){\r\n            studentName = <div>\r\n                <h2>Hey Student,please let us know your name</h2>\r\n                <form onSubmit ={this.nameSubmit}>\r\n                    <input className=\"namy\" type=\"text\" placeholder=\"Enter your name\"  ref=\"name\" />\r\n                </form>\r\n            </div>;\r\n\r\n            questions=''\r\n        } else if(this.state.studentName!== '' && this.state.isSubmitted === false){\r\n            studentName =<h2>Welcome to U-Survey, {this.state.studentName}</h2>;\r\n            questions=<div>\r\n               <h3>Here are some questions:</h3>\r\n               <form onSubmit={this.questionSubmit}>\r\n                 <div className=\"card\">\r\n                    <label> What kind of courses you like the most:</label><br/>\r\n                 <input type=\"radio\" name=\"answer1\" value=\"Technology\"  onChange={this.answerSelected}/>Technology\r\n                 <input type=\"radio\" name=\"answer1\" value=\"Design\"  onChange={this.answerSelected}/>Design\r\n                 <input type=\"radio\" name=\"answer1\" value=\"Marketing\"  onChange={this.answerSelected}/>Marketing\r\n                 </div>\r\n                 <div className=\"card\">\r\n                 <label> you are a:</label><br/>\r\n                 <input type=\"radio\" name=\"answer2\" value=\"Student\"  onChange={this.answerSelected}/>Student\r\n                 <input type=\"radio\" name=\"answer2\" value=\"in-job\"  onChange={this.answerSelected}/>in-job\r\n                 <input type=\"radio\" name=\"answer2\" value=\"looking-job\"  onChange={this.answerSelected}/>looking-job\r\n                 </div>\r\n               <div className=\"card\">\r\n               <label> Is online learning helpful:</label><br/>\r\n               <input type=\"radio\" name=\"answer3\" value=\"Yes\"  onChange={this.answerSelected}/>Yes\r\n               <input type=\"radio\" name=\"answer3\" value=\"No\"  onChange={this.answerSelected}/>No\r\n               <input type=\"radio\" name=\"answer3\" value=\"Maybe\"  onChange={this.answerSelected}/>Maybe\r\n               </div>\r\n               <input className=\"feedback-button\" type=\"submit\" value=\"submit\" />\r\n               </form>\r\n            </div>\r\n        } else if(this.state.isSubmitted === true && this.state.studentName!==''){\r\n            studentName=<h1>Thanks,{this.state.studentName} </h1>\r\n\r\n        }\r\n      return (\r\n        <div>\r\n            {studentName}\r\n            ---------------------------------------\r\n            {questions}\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n\r\n  export default Usurvey;","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Usurvey from './Usurvey'\nclass App extends Component {\n  render(){\n    return (\n      <div className=\"App\">\n        <div className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        </div>\n        <Usurvey/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}